- name: Bootstrap development environment
  hosts: localhost

  tasks:

  - name: Set os family env variable
    set_fact:
      os_family: "{{ 'debian' if ansible_facts['os_family'] == 'Debian' else 'osx' if ansible_facts['os_family'] == 'Darwin' else 'common' }}"

  # ----------- Install git -----------

  - name: Install git
    become: yes
    ansible.builtin.apt:
      name:
        - git
        - curl
      state: present
    when: ansible_facts['os_family'] == "Debian"

  - name: Check if Homebrew is installed
    ansible.builtin.command: brew --version
    register: brew_installed
    ignore_errors: yes
    when: ansible_facts['os_family'] == "Darwin"

  - name: Install Homebrew on macOS if not present
    ansible.builtin.shell: |
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    when: brew_installed.rc != 0 and ansible_facts['os_family'] == "Darwin"
    when: ansible_facts['os_family'] == "Darwin"

  - name: Install Git using Homebrew
    ansible.builtin.homebrew:
      name: git
      state: present
    when: ansible_facts['os_family'] == "Darwin"

  - name: Copy global gitignore file
    ansible.builtin.copy:
      src: "configs/common/.gitignore_global"
      dest: "~/.gitignore_global"
      mode: '0664'

  - name: Set global exclude file
    ansible.builtin.command: git config --global core.excludesfile ~/.gitignore_global

  # ----------- Install zsh -----------

  - name: Install zsh
    ansible.builtin.package:
      name: zsh
      state: present

  - name: Change default shell to zsh
    ansible.builtin.command: chsh -s /usr/bin/zsh

  - name: Create .zshrc if not exist
    ansible.builtin.file:
      path: ~/.zshrc
      state: touch

  # ----------- Setup oh-my-zsh and p10k theme -----------

  - name: Check if oh-my-zsh already installed
    stat:
      path: ~/.oh-my-zsh
    register: zsh_check

  - name: Install oh-my-zsh
    ansible.builtin.shell: |
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    args:
      executable: /bin/sh
    when: not zsh_check.stat.exists

  - name: Clone the p10k theme
    ansible.builtin.git:
      repo: https://github.com/romkatv/powerlevel10k.git
      dest: ~/.oh-my-zsh/custom/themes/powerlevel10k
      depth: 1

  - name: Copy p10k.zsh config
    ansible.builtin.copy:
      src: "configs/common/p10k.zsh"
      dest: "~/.p10k.zsh"
      mode: '0664'

  - name: Source pk10.zsh config in .zshrc
    ansible.builtin.lineinfile:
      path: ~/.zshrc
      line: '[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh'
      state: present

  - name: Set p10k theme
    ansible.builtin.shell: sed -i 's/^ZSH_THEME=".*"/ZSH_THEME="powerlevel10k\/powerlevel10k"/' ~/.zshrc
    args:
      executable: /bin/zsh

  # ----------- Custom zsh configs -----------

  - name: Load custom zsh configurations
    include_tasks: "scripts/common/zsh.yaml"

  # ----------- Install Node 18 -----------

  - name: Check node if already installed
    ansible.builtin.shell: which node
    register: node_check
    ignore_errors: true

  - name: Install Node 18
    include_tasks: "scripts/{{os_family}}/node.yaml"
    when: node_check.rc != 0

  # ----------- Install Python3 -----------

  - name: Check python if already installed
    ansible.builtin.shell: which python3
    register: python_check
    ignore_errors: true

  - name: Install Python 3.x
    include_tasks: "scripts/{{os_family}}/python.yaml"
    when: python_check.rc != 0

  - name: Alias python -> python3 and pip -> pip3
    ansible.builtin.blockinfile:
      path: ~/.zshrc
      block: |
        alias python=python3
        alias pip=pip3
      state: present
      marker: "# {mark} PYTHON ALIAS"

  # ----------- Install rust -----------

  - name: Check rust if already installed
    ansible.builtin.shell: which cargo
    register: cargo_check
    ignore_errors: true
    args:
      executable: /bin/zsh

  - name: Install rustup
    become: yes
    ansible.builtin.shell: |
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    when: cargo_check.rc != 0

  - name: Set rustup stable version
    become: yes
    ansible.builtin.shell: |
      . $HOME/.cargo/env
      rustup override set stable
      rustup update stable
    when: cargo_check.rc != 0

  - name: Update rust path variable
    ansible.builtin.lineinfile:
      path: ~/.zshrc
      line: 'export PATH="$HOME/.cargo/bin:$PATH"'
      state: present


  # ----------- Setup Hack Nerd fonts -----------

  - name: Install Hack Nerd Fonts
    include_tasks: "scripts/{{os_family}}/fonts.yaml"

  # ----------- Setup Alacritty terminal -----------

  - name: Check alacritty if already installed
    command: which alacritty
    register: alacritty_check
    ignore_errors: true

  - name: Setup alacritty 0.14.0 repository
    become: yes
    ansible.builtin.git:
      repo: https://github.com/alacritty/alacritty.git
      dest: /opt/alacritty
      depth: 1
      version: "d021a7b6"
    when: alacritty_check.rc != 0

  - name: Install alacritty
    include_tasks: "scripts/{{os_family}}/alacritty.yaml"
    when: alacritty_check.rc != 0

  - name: Create alacritty config folder if not exist
    ansible.builtin.file:
      path: "~/.config/alacritty" 
      state: directory
      mode: '0700'

  - name: Copy alacritty config
    ansible.builtin.copy:
      src: "configs/{{os_family}}/alacritty.toml"
      dest: "~/.config/alacritty/alacritty.toml"
      mode: '0664'

  # ----------- Setup tmux -----------
  
  - name: Check tmux if already installed
    ansible.builtin.shell: which tmux
    register: tmux_check
    ignore_errors: true

  - name: Install tmux
    package:
      name: tmux
      state: present
    when: tmux_check.rc != 0

  - name: Copy tmux config
    ansible.builtin.copy:
      src: "configs/common/tmux.conf"
      dest: "~/.tmux.conf"
      mode: '0664'

  - name: Clone tpm repository
    ansible.builtin.git:
      repo: 'https://github.com/tmux-plugins/tpm.git'
      dest: ~/.tmux/plugins/tpm
    become: yes
    when: tmux_check.rc != 0

  - name: Install tpm plugins
    become: yes
    ansible.builtin.shell: "~/.tmux/plugins/tpm/bin/install_plugins"
    when: tmux_check.rc != 0

  # ----------- Setup neovim -----------

  - name: Check nvim if already installed
    ansible.builtin.shell: which nvim
    register: nvim_check
    ignore_errors: true

  - name: Clone nvim repository
    become: yes
    ansible.builtin.git:
      repo: https://github.com/neovim/neovim
      dest: /tmp/neovim
      depth: 1
      version: "release-0.9"
    when: nvim_check.rc != 0

  - name: Install nvim
    include_tasks: "scripts/{{os_family}}/nvim.yaml"
    when: nvim_check.rc != 0

  - name: Check if my config already exists
    stat:
      path: ~/.config/nvim/lua/kp
    register: nvim_config_check

  - name: Backup an already existing config
    ansible.builtin.shell: mv ~/.config/nvim ~/.config/nvim-a-bak
    ignore_errors: true
    when: not nvim_config_check.stat.exists

  - name: Clone nvim config
    ansible.builtin.git:
      repo: "https://github.com/KaustubhPatange/init.lua"
      dest: ~/.config/nvim
      version: "master"
      update: true

  - name: Add mason bin to PATH
    ansible.builtin.lineinfile:
      path: ~/.zshrc
      line: 'export PATH="$HOME/.local/share/nvim/mason/bin:$PATH"'
      state: present
